

// essential header for ROS-OpenCV operation
#include <ros/ros.h>

// for using standard messages, float 32 type
// communicate to image processing algorithm result
#include <std_msgs/Float32MultiArray.h>

// for using serial communication
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <arpa/inet.h>


//#define debug

// setup the initial name
using namespace ros;
using namespace std;


#define DF_UDP_BUFFER_SIZE  8192
#define DF_UDP_PORTNUM      23000					/////  UAV2 -> UAV3		server
#define DF_UDP_SERVER_ADDR  "20.0.1.123"				/////  UAV2 -> UAV3		for Client

struct timeval tv_timeo = { 0, 500000 };   // 0.5 seconds

struct struct_t_UDP
{
    int    Socket;
	struct sockaddr_in ServerAddr;

    char   TXBuffer[DF_UDP_BUFFER_SIZE];
    char   RXBuffer[DF_UDP_BUFFER_SIZE];
};

#pragma pack(1)
struct RX_message_data
{
    int headerA=1;
    int headerB=1;
    int headerC=1;

    int WP_start=1;

    float x_tar=1;
    float y_tar=1;
};
#pragma pack()


struct struct_t_UDP           StrUDP;
struct sockaddr_in            MyAddr;
struct RX_message_data        RX_buff;


// for publishing the kalman states
std_msgs::Float32MultiArray receive_data;


int a = 0;



// node main loop, for ROS
int main(int argc, char** argv)
{
	// node name initialization
    init(argc, argv, "udp_client");

	// assign node handler
	ros::NodeHandle nh_;

	// for debugging
	printf("Initiate: vel_track_node\n");


	// subscribing the image processing results (x_pos, y_pos)
    //Subscriber msg_image_input = nh_.subscribe("/flight_state", 1, callback_serial_comm);


	// for publishing the kalman filter results
	//Publisher pub_kalman_output = nh_.advertise<std_msgs::Float32MultiArray>("/hectorSLAM/kalman_output", 1);

    Publisher  msg_data_output = nh_.advertise<std_msgs::Float32MultiArray>("/UAV/UAV_cmd", 3);


	// setup the loop speed, [Hz], synchronizing the hector slam loop
    ros::Rate loop_rate(10);

	float fdt = (float)(1/20);


    // Socket Creation
    StrUDP.Socket = socket(PF_INET, SOCK_DGRAM, 0);
    if(StrUDP.Socket == -1)
    {
        printf("[ERROR] 'socket()'\n");
        return -1;
    }
    else
    {
        printf("[DONE] UDP socket is created\n");
    }



    // UDP-IP Setting_Client
    memset(&StrUDP.ServerAddr, 0, sizeof(StrUDP.ServerAddr)); // Clear to 0
    StrUDP.ServerAddr.sin_family      = PF_INET;
    StrUDP.ServerAddr.sin_port        = htons(DF_UDP_PORTNUM); // PORT#
    StrUDP.ServerAddr.sin_addr.s_addr = inet_addr(DF_UDP_SERVER_ADDR); // IP for Server (Normally PC IP)

    memset(&MyAddr, 0, sizeof(MyAddr));
    MyAddr.sin_family = PF_INET;
    MyAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    MyAddr.sin_port = htons(DF_UDP_PORTNUM);

    if(bind(StrUDP.Socket,(struct sockaddr *)&MyAddr, sizeof(MyAddr))!=0)
    {
        printf("bind1() error!\n");
        return -1;
    }

    char sendBuff = 1;

    int size_addr = sizeof(StrUDP.ServerAddr);
    //printf("[DONE] UDP initialized! size : %d\n",size_addr);

    int aa;

    if(setsockopt(StrUDP.Socket,SOL_SOCKET, SO_RCVTIMEO, &tv_timeo, sizeof(tv_timeo)) == -1)
    {
        printf("setsockopt error!\n");
        return -1;
    }


	// node loop, for ROS, check ros status, ros::ok()



	while( ok() )
	{
        aa = sendto(StrUDP.Socket, (char*)&sendBuff, sizeof(sendBuff), 0, (struct sockaddr *)(&StrUDP.ServerAddr), sizeof(StrUDP.ServerAddr));
        aa = recvfrom(StrUDP.Socket,(char*)&RX_buff,sizeof(RX_buff), 0, (struct sockaddr *)(&StrUDP.ServerAddr), (socklen_t *)&size_addr);
        printf("sending!\n");
        printf("recv data : %d  %.3f  %.3f\n",RX_buff.WP_start, RX_buff.x_tar, RX_buff.y_tar);


/*
        receive_data.data.resize(3);
        receive_data.data[0] = RX_buff.WP_start;
        receive_data.data[1] = RX_buff.x_tar;
        receive_data.data[2] = RX_buff.y_tar;
        msg_data_output.publish(receive_data);
*/
		// loop rate [Hz]
        loop_rate.sleep();


		// loop sampling, ros
		spinOnce();
	}

	// for debugging
	printf("Terminate: FCC_Serial_node\n");
    close(StrUDP.Socket);

	return 0;
}





